// <auto-generated />
using System;
using ForexExchangeMonitoring.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ForexExchangeMonitoring.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ForexCurrencyModelDbContext))]
    [Migration("20211112171149_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ForexExchangeMonitoring.Domain.DbModels.CurrencyModel", b =>
                {
                    b.Property<int>("CurrencyModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("currency_Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CurrencyName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("currency_name");

                    b.HasKey("CurrencyModelId");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("ForexExchangeMonitoring.Domain.DbModels.ForexCurrencyRateModel", b =>
                {
                    b.Property<int>("ForexCurrencyModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("currency_exchange_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("ExchangeRate")
                        .HasColumnType("float")
                        .HasColumnName("exchange_rate");

                    b.Property<int?>("FromCurrencyId")
                        .HasColumnType("int")
                        .HasColumnName("from_currency_id");

                    b.Property<DateTime>("LastRefreshedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_refreshed_date");

                    b.Property<int?>("ToCurrencyId")
                        .HasColumnType("int")
                        .HasColumnName("to_currency_id");

                    b.HasKey("ForexCurrencyModelId");

                    b.HasIndex("FromCurrencyId");

                    b.HasIndex("ToCurrencyId");

                    b.ToTable("CurrencyExchangeRatesLive");
                });

            modelBuilder.Entity("ForexExchangeMonitoring.Domain.DbModels.HistoryRateModel", b =>
                {
                    b.Property<int>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("currency_exchange_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("ExchangeRate")
                        .HasColumnType("float")
                        .HasColumnName("exchange_rate");

                    b.Property<int?>("ForexCurrencyModelId")
                        .HasColumnType("int");

                    b.Property<int?>("FromCurrencyId")
                        .HasColumnType("int")
                        .HasColumnName("from_currency_id");

                    b.Property<DateTime>("LastRefreshedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_refreshed_date");

                    b.Property<int?>("ToCurrencyId")
                        .HasColumnType("int")
                        .HasColumnName("to_currency_id");

                    b.HasKey("HistoryId");

                    b.HasIndex("ForexCurrencyModelId");

                    b.HasIndex("FromCurrencyId");

                    b.HasIndex("ToCurrencyId");

                    b.ToTable("CurrencyExchangeRatesHistory");
                });

            modelBuilder.Entity("ForexExchangeMonitoring.Domain.DbModels.ForexCurrencyRateModel", b =>
                {
                    b.HasOne("ForexExchangeMonitoring.Domain.DbModels.CurrencyModel", "FromCurrency")
                        .WithMany("FromForexCurrencyModels")
                        .HasForeignKey("FromCurrencyId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ForexExchangeMonitoring.Domain.DbModels.CurrencyModel", "ToCurrency")
                        .WithMany("ToForexCurrencyModels")
                        .HasForeignKey("ToCurrencyId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("FromCurrency");

                    b.Navigation("ToCurrency");
                });

            modelBuilder.Entity("ForexExchangeMonitoring.Domain.DbModels.HistoryRateModel", b =>
                {
                    b.HasOne("ForexExchangeMonitoring.Domain.DbModels.ForexCurrencyRateModel", "ForexCurrencyModel")
                        .WithMany("Histories")
                        .HasForeignKey("ForexCurrencyModelId");

                    b.HasOne("ForexExchangeMonitoring.Domain.DbModels.CurrencyModel", "FromCurrency")
                        .WithMany()
                        .HasForeignKey("FromCurrencyId");

                    b.HasOne("ForexExchangeMonitoring.Domain.DbModels.CurrencyModel", "ToCurrency")
                        .WithMany()
                        .HasForeignKey("ToCurrencyId");

                    b.Navigation("ForexCurrencyModel");

                    b.Navigation("FromCurrency");

                    b.Navigation("ToCurrency");
                });

            modelBuilder.Entity("ForexExchangeMonitoring.Domain.DbModels.CurrencyModel", b =>
                {
                    b.Navigation("FromForexCurrencyModels");

                    b.Navigation("ToForexCurrencyModels");
                });

            modelBuilder.Entity("ForexExchangeMonitoring.Domain.DbModels.ForexCurrencyRateModel", b =>
                {
                    b.Navigation("Histories");
                });
#pragma warning restore 612, 618
        }
    }
}
